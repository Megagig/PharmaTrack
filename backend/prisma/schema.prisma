generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  role       UserRole
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  pharmacyId String?
  pharmacy   Pharmacy? @relation(fields: [pharmacyId], references: [id])

  @@map("users")
}

model Pharmacy {
  id                 String       @id @default(uuid())
  name               String
  pharmacistInCharge String
  pcnLicenseNumber   String       @unique
  phoneNumber        String
  email              String?
  address            String
  ward               String
  lga                String
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  reports            Report[]
  users              User[]
  products           Product[]
  suppliers          Supplier[]
  purchases          Purchase[]
  sales              Sale[]
  transactions       Transaction[]

  @@map("pharmacies")
}

model Report {
  id                          String   @id @default(uuid())
  reportDate                  DateTime
  patientsServed              Int
  maleCount                   Int?
  femaleCount                 Int?
  childrenCount               Int?
  adultCount                  Int?
  elderlyCount                Int?
  topMedications              String[]
  commonAilments              String[]
  adverseDrugReactions        Int
  adverseReactionDetails      String?
  referralsMade               Int
  immunizationsGiven          Int?
  healthEducationSessions     Int?
  bpChecks                    Int?
  expiredDrugs                Boolean?
  stockouts                   Boolean?
  supplyDelays                Boolean?
  notes                       String?

  // Service Delivery Data
  prescriptionsFilled         Int?
  otcConsultations            Int?
  mtmInterventions            Int?

  // Economic Contribution
  monthlyRevenue              Float?
  staffPharmacists            Int?
  staffTechnicians            Int?
  staffOthers                 Int?
  taxesPaid                   Float?
  localSuppliersCount         Int?

  // Challenges and Barriers
  regulatoryComplianceCost    Float?
  hasSubsidizedMedicines      Boolean?
  insuranceInclusionIssues    Boolean?
  fakeOrSubstandardDrugs      Int?
  rejectedInsuranceClaims     Int?

  // Public Health Role
  publicHealthPartnerships    String[]

  // Technology and Digital Adoption
  usesElectronicRecords       Boolean?
  usesMobileHealth            Boolean?
  usesInventoryManagement     Boolean?

  // Community Feedback
  patientSatisfactionScore    Float?
  timeComparedToHospital      Int?  // Time saved in minutes

  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  pharmacyId                  String
  pharmacy                    Pharmacy @relation(fields: [pharmacyId], references: [id])

  @@map("reports")
}

// Inventory Module Models
model Product {
  id                String       @id @default(uuid())
  name              String
  description       String?
  sku               String       @unique
  barcode           String?
  category          String
  dosageForm        String?      // e.g., tablet, capsule, liquid
  strength          String?      // e.g., 500mg, 10ml
  costPrice         Float
  wholesalePrice    Float
  retailPrice       Float
  reorderLevel      Int
  currentStock      Int          @default(0)
  manufacturer      String?
  expiryDate        DateTime?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  pharmacyId        String
  pharmacy          Pharmacy     @relation(fields: [pharmacyId], references: [id])
  purchaseItems     PurchaseItem[]
  saleItems         SaleItem[]
  stockAdjustments  StockAdjustment[]
  batchItems        BatchItem[]

  @@map("products")
}

model Supplier {
  id           String     @id @default(uuid())
  name         String
  contactName  String?
  email        String?
  phone        String
  address      String?
  city         String?
  state        String?
  zipCode      String?
  country      String?
  taxId        String?
  paymentTerms String?
  notes        String?
  status       String     @default("ACTIVE")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  pharmacyId   String
  pharmacy     Pharmacy   @relation(fields: [pharmacyId], references: [id])
  purchases    Purchase[]

  @@map("suppliers")
}

model Purchase {
  id               String         @id @default(uuid())
  invoiceNumber    String
  purchaseDate     DateTime
  totalAmount      Float
  paymentStatus    PaymentStatus  @default(PENDING)
  paymentMethod    PaymentMethod?
  notes            String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  supplierId       String
  supplier         Supplier       @relation(fields: [supplierId], references: [id])
  pharmacyId       String
  pharmacy         Pharmacy       @relation(fields: [pharmacyId], references: [id])
  purchaseItems    PurchaseItem[]
  transaction      Transaction?

  @@map("purchases")
}

model PurchaseItem {
  id          String   @id @default(uuid())
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  batchNumber String?
  expiryDate  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  purchaseId  String
  purchase    Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  batchItems  BatchItem[]

  @@map("purchase_items")
}

model BatchItem {
  id             String       @id @default(uuid())
  batchNumber    String
  expiryDate     DateTime
  initialQuantity Int
  currentQuantity Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  productId      String
  product        Product      @relation(fields: [productId], references: [id])
  purchaseItemId String?
  purchaseItem   PurchaseItem? @relation(fields: [purchaseItemId], references: [id])
  saleItems      SaleItem[]

  @@map("batch_items")
}

model Sale {
  id             String       @id @default(uuid())
  invoiceNumber  String
  saleDate       DateTime
  customerName   String?
  customerPhone  String?
  customerEmail  String?
  totalAmount    Float
  discount       Float        @default(0)
  tax            Float        @default(0)
  paymentStatus  PaymentStatus @default(PAID)
  paymentMethod  PaymentMethod
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  pharmacyId     String
  pharmacy       Pharmacy     @relation(fields: [pharmacyId], references: [id])
  saleItems      SaleItem[]
  transaction    Transaction?

  @@map("sales")
}

model SaleItem {
  id          String     @id @default(uuid())
  quantity    Int
  unitPrice   Float
  totalPrice  Float
  discount    Float      @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  saleId      String
  sale        Sale       @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId   String
  product     Product    @relation(fields: [productId], references: [id])
  batchItemId String?
  batchItem   BatchItem? @relation(fields: [batchItemId], references: [id])

  @@map("sale_items")
}

model StockAdjustment {
  id          String               @id @default(uuid())
  date        DateTime
  quantity    Int
  reason      StockAdjustmentReason
  notes       String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  productId   String
  product     Product              @relation(fields: [productId], references: [id])

  @@map("stock_adjustments")
}

model Transaction {
  id          String          @id @default(uuid())
  date        DateTime
  amount      Float
  type        TransactionType
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  pharmacyId  String
  pharmacy    Pharmacy        @relation(fields: [pharmacyId], references: [id])
  purchaseId  String?         @unique
  purchase    Purchase?       @relation(fields: [purchaseId], references: [id])
  saleId      String?         @unique
  sale        Sale?           @relation(fields: [saleId], references: [id])

  @@map("transactions")
}

enum UserRole {
  PHARMACY
  EXECUTIVE
  ADMIN
}

enum PaymentStatus {
  PENDING
  PARTIAL
  PAID
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CARD
  MOBILE_MONEY
  CREDIT
  OTHER
}

enum StockAdjustmentReason {
  DAMAGE
  EXPIRY
  THEFT
  RETURN
  CORRECTION
  OTHER
}

enum TransactionType {
  INCOME
  EXPENSE
}
